#crear proyecto nuevo de Django
django-admin startproject Mi_proyecto
cd Mi_proyecto
python manage.py migrate #levanta o genera una nueva base de datos 

#levantar proyecto en servidor y ctrl+C cerramos servidor para validar que funcione
python manage.py runserver

#iniciamos git
git init

#creamos el archivo .gitignore dentro del proyecto para que git ignore ciertos archivos que no quiero subir al proyecto 
#cargamos todos los archivos
git add .

#realizamos primer commit a main
git commit -m "Mi primer commit"

#luego de crear o validar que exista el proyecto en github lo vinculamos con:
git remote add origin https://github.com/fanico85/claseDjango.git

#cambiamos por primera vez el nombre de la rama Master por main
git branch -M main

#subir ese primer codigo a git 
git push -u origin main

#creamos una rama nueva y nos ubicamos ahi
git checkout -b rama_17

#para movernos entre las ramas, hacemos:
git checkout nombre_rama

#volvemos a django, generamos una vista, creando el archivo views.py en la carpeta del proyecto y le importamos las lobrearias necesarias para que se ejecuten las funciones
#en urls.py agregamos los paths que llaman a una determinada funcion de views

#luego de guardar los cambios podemos levantar el servidor para validar el funcionamiento
python manage.py runserver

#podemos generar plantillas para separar la vista de la estética. Django se basa en el Modelo Vista Template
#creamos en el proyecto la carpeta plantillas
#luego dentro de plantillas creamos el archivo index.html o con el nombre que querramos
#dentro del index.html ponemos ! y presionamos enter -> nos genera todo un contenido de HTML basico para completar, con header, body, estética
#luego en views importamos las librearias necesarias para trabajar con Template
#generaremos la funcion con lineas necesarias, como abrir el html, generar la plantilla, cerrar html, creamos el contexto, y renderizamos la plantilla

#volvemos a git para guardar los cambios de la nueva rama
#valimos el estado
git status

#enviamos la nueva rama con:
git add .
git commit -m "segundo commit"
git push --set-upstream origin rama_18

#si enviamos los cambios a una rama existente, seria:
git add .
git commit -m "segundo commit"
git push

#queda pendiente como mergear las ramas con el main!!!!!!!!!!!

#si luego seguimos modificando el proyecto, lo vinculamos:
git remote add origin https://github.com/fanico85/claseDjango.git

#nos movemos a la rama correspondiente main u otra:
git checkout rama_17

#traemos la data 
git pull

#creamos una rama nueva y nos ubicamos ahi
git checkout -b rama_18

#luego repetimos los mismos pasos 
#enviamos la nueva rama con:
git add .
git commit -m "nuevo commit"
git push --set-upstream origin rama_18

#si enviamos los cambios a una rama existente, seria:
git add .
git commit -m "otro commit"
git push

#Ahora agregamos o creamos una nueva aplicacion
python manage.py startapp NombreApi

#se agrega el nombre de la app en settings.py y completa el modelo con las clases
#procemos a generar el codigo necesario para migrarlos luego a la base
python manage.py makemigrations

#migramos las tablas a la base con:
python manage.py migrate










#Otros comandos
#cuando queremos descargar todo un proyecto, se clona con
git clone https://github.com/fanico85/claseDjango.git






