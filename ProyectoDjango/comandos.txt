#creo entorno virtual en una nueva carpeta vacia que representará mi proyecto
#Tercera_preentrega_Collado

#valido que version tengo de python y de Django
python --version 
python -m django --version

#creamos entorno virtual con python 3.11.9
pipenv --python 3.11.9
pipenv  shell

#agregamos archivo requirements.txt con el siguiente contenido:
# #Python 3.11.9
# django==5.0.6

#instalamos django en el entorno virtual
pipenv install -r requirements.txt

#creamos un proyecto nuevo de Django
django-admin startproject Nails_factory
cd Nails_factory

#creamos la primera aplicacion
python manage.py startapp Principal

#levanta o genera una nueva base de datos 
python manage.py migrate 

#levantar proyecto en servidor y ctrl+C cerramos servidor para validar que funcione
python manage.py runserver

#en el settings.py configurar el nombre de la nueva aplicacion en INSTALLED_APPS, por ejemplo Principal 

#URLS 
#copiarlas desde el original y hacer los imports en urls.py

#creamos las vistas en views.py que renderizaran los archivos htmls

#creamos la carpeta templates que contendra los htmls 

#iniciamos git
git init

#creamos el archivo .gitignore con el contenido a ignorar:
# __pycache__/
# *.pyc
# Pipfile
# Pipfile.lock

#cargamos todos los archivos
git add .

#realizamos primer commit a main
git commit -m "creacion de proyecto"

#crear proyecto en github NailsFactory
#copiamos los 3 comandos que nos brinda github o hacemos la vinculacion con:
git remote add origin https://github.com/fanico85/NailsFactory.git

#cambiamos por primera vez el nombre de la rama Master por main
git branch -M main

#subir ese primer codigo a git 
git push -u origin main

#creamos una rama nueva y nos ubicamos ahi
git checkout -b rama_1

#para movernos entre las ramas, hacemos:
git checkout nombre_rama

#volvemos a django, generamos una vista, creando el archivo views.py en la carpeta del proyecto y le importamos las librearias necesarias para que se ejecuten las funciones
#en urls.py agregamos los paths que llaman a una determinada funcion de views

#luego de guardar los cambios podemos levantar el servidor para validar el funcionamiento
python manage.py runserver

#podemos generar plantillas para separar la vista de la estética. Django se basa en el Modelo Vista Template
#creamos en el proyecto la carpeta plantillas
#luego dentro de plantillas creamos el archivo index.html o con el nombre que querramos
#dentro del index.html ponemos ! y presionamos enter -> nos genera todo un contenido de HTML basico para completar, con header, body, estética
#luego en views importamos las librearias necesarias para trabajar con Template
#generaremos la funcion con lineas necesarias, como abrir el html, generar la plantilla, cerrar html, creamos el contexto, y renderizamos la plantilla

#volvemos a git para guardar los cambios de la nueva rama
#valimos el estado
git status

#enviamos la nueva rama con:
git add .
git commit -m "segundo commit"
git push --set-upstream origin rama_18

#si enviamos los cambios a una rama existente, seria:
git add .
git commit -m "segundo commit"
git push

#queda pendiente como mergear las ramas con el main!!!!!!!!!!!

#si luego seguimos modificando el proyecto, lo vinculamos:
git remote add origin https://github.com/fanico85/claseDjango.git

#nos movemos a la rama correspondiente main u otra:
git checkout rama_17

#traemos la data 
git pull

#creamos una rama nueva y nos ubicamos ahi
git checkout -b rama_18

#luego repetimos los mismos pasos 
#enviamos la nueva rama con:
git add .
git commit -m "nuevo commit"
git push --set-upstream origin rama_18

#si enviamos los cambios a una rama existente, seria:
git add .
git commit -m "otro commit"
git push

#Ahora agregamos o creamos una nueva aplicacion
python manage.py startapp NombreApi

#se agrega el nombre de la app en settings.py y completa el modelo con las clases
#procemos a generar el codigo necesario para migrarlos luego a la base
python manage.py makemigrations

#migramos las tablas a la base con:
python manage.py migrate



#creamos super usuarios
python manage.py createsuperuser  
#test y 12345678AB



#Otros comandos
#cuando queremos descargar todo un proyecto, se clona con
git clone https://github.com/fanico85/claseDjango.git






